name: "Deploy code to an Astro Cloud Dpeloyment"
description: "Deploys your Astro project to an Astro Cloud Deployment. Works with DAG-Only Deploys enabled or disabled."
inputs:
  dag-deploy-enabled:
    required: false
    default: false
    description: "If true only DAGs will be deployed when dag files are pushed."
  root-folder:
    required: false
    default: ./
    description: "Path to to Astro project folder that contains that 'dags' folder"
  parse:
    required: false
    default: false
    description: "If true DAGs will be parsed before deploying to Astro."
  pytest:
    required: false
    default: false
    description: "if true custom Pytests will be ran before deploying to Astro."
  pytest-file:
    required: false
    description: "Specify custom Pytest files to run with the pytest command."
  force:
    required: false
    default: false
    description: "If true your code will be force deployedto Astornomer. Mostly uesd to skip parse test on image deploys."
  image-name:
    required: false
    default: no-custom-image
    description: Specify a custom built image to deploy to an Asto Deployment.
runs:
  using: "composite"
  steps:
    - name: checkout repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 2
    # Determine if only DAGs have changes 
    - name: Get Deployment Type
      run: |
        cd ${{ inputs.root-folder }}
        files=$(git diff --name-only HEAD^..HEAD)
        dags_only=1

        for file in $files; do
          if [[ $file != "dags/"* ]]; then
            echo $file is not a dag, triggering a full image build
            dags_only=0
            break
          fi
        done

        if [[ ${{ inputs.dag-deploy-enabled }} == false ]]; then
          dags_only=0
        fi

        echo "DAGS_ONLY=$dags_only" >> $GITHUB_OUTPUT
      shell: bash
      id: deployment-type
    # If only DAGs changed and dag deploys is enabled, do a DAG-only deploy
    - name: setup deploy options
      run: |
        options=""

        # add parse option
        if [[ ${{ inputs.parse }} == true ]]; then
          options="--parse"
        fi

        # add pytest option
        if [[ ${{ inputs.pytest }} == true ]]; then
          options="$options --pytest --test ${{ inputs.pytest-file }}"
        fi

        # add custom image option
        if [[ ${{ inputs.image-name }} != no-custom-image ]]; then
          options="$options --image-name ${{ inputs.image-name }}"
        fi
        
        # add force option
        if [[ ${{ inputs.force }} == true ]]; then
          options="$options --force"
        fi

        echo "OPTIONS=$options" >> $GITHUB_OUTPUT
      shell: bash
      id: deploy-options
    - name: DAG Deploy to Astro
      if: steps.deployment-type.outputs.DAGS_ONLY == 1
      run: |
        cd ${{ inputs.root-folder }}
        curl -sSL https://install.astronomer.io | sudo bash -s
        astro deploy ${{steps.deploy-options.outputs.OPTIONS}}
      shell: bash
    # If any other files changed or dag deploys is disabled, deploy the entire Astro project
    - name: Image and DAG Deploy to Astro
      if: steps.deployment-type.outputs.DAGS_ONLY == 0
      run: |
        cd ${{ inputs.root-folder }}
        curl -sSL https://install.astronomer.io | sudo bash -s
        astro deploy ${{steps.deploy-options.outputs.OPTIONS}}
      shell: bash
  